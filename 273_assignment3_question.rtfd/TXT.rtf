{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red27\green31\blue34;\red255\green255\blue255;\red10\green77\blue204;
\red24\green25\blue26;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c14118\c16078\c18039;\cssrgb\c100000\c100000\c100000;\cssrgb\c1176\c40000\c83922;
\cssrgb\c12549\c12941\c13333;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww17260\viewh12660\viewkind0
\deftab720
\pard\pardeftab720\sl360\partightenfactor0

\f0\fs36 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 What are the best\'a0k\'a0hashes and\'a0m\'a0bits values to store one million\'a0n\'a0keys (E.g. e52f43cd2c23bb2e6296153748382764) suppose we use the same MD5 hash key from\'a0{\field{\*\fldinst{HYPERLINK "https://github.com/sithu/cmpe273-spring20/blob/master/midterm/pickle_hash.py#L14"}}{\fldrslt \cf4 \strokec4 pickle_hash.py}}\'a0and explain why?\
\
\
For K, we have equation to calculate optimal number of hash functions\cf5 \cb3 \outl0\strokewidth0 \
k=\cf0 \cb3 (m/n)ln(2) \
 \
We using the same MD5 hash key which means false positive rate  fp_prob =0.05.\
\
\pard\pardeftab720\partightenfactor0
\cf0 fp_ptob = (1-e\cb3 \super -kn/m\cb3 \nosupersub )\cb3 \super k\
\cb3 \nosupersub \
\pard\pardeftab720\sl360\partightenfactor0
\cf0 n=1,000,000\cf5 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb1 \
After simplify,  K = -ln(fp_prob)/ln(2) = 4\
\
m = 5,771,172
\fs28 \
}